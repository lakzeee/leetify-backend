// <auto-generated />
using System;
using LeetifyGraphQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LeetifyGraphQL.Data.Migrations
{
    [DbContext(typeof(LeetifyDbContext))]
    [Migration("20240311012955_UpdateMorePlanQuestion")]
    partial class UpdateMorePlanQuestion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LeetifyGraphQL.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserSub")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserSub");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("LeetifyGraphQL.Entities.PlanQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<int>("GroupOrder")
                        .HasColumnType("integer");

                    b.Property<int>("GroupRank")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PlanQuestions");
                });

            modelBuilder.Entity("LeetifyGraphQL.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted")
                        .HasColumnType("text");

                    b.Property<string>("Companies")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer");

                    b.Property<double>("Frequency")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedTopics")
                        .HasColumnType("text");

                    b.Property<string>("SimilarQuestions")
                        .HasColumnType("text");

                    b.Property<string>("Submissions")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LeetifyGraphQL.Entities.User", b =>
                {
                    b.Property<string>("Sub")
                        .HasColumnType("text");

                    b.Property<string>("AuthProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Sub");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlanUser", b =>
                {
                    b.Property<string>("SavedByUsersSub")
                        .HasColumnType("text");

                    b.Property<Guid>("SavedPlansId")
                        .HasColumnType("uuid");

                    b.HasKey("SavedByUsersSub", "SavedPlansId");

                    b.HasIndex("SavedPlansId");

                    b.ToTable("PlanUser");
                });

            modelBuilder.Entity("LeetifyGraphQL.Entities.Plan", b =>
                {
                    b.HasOne("LeetifyGraphQL.Entities.User", "CreatedByUser")
                        .WithMany("CreatedPlans")
                        .HasForeignKey("CreatedByUserSub");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("LeetifyGraphQL.Entities.PlanQuestion", b =>
                {
                    b.HasOne("LeetifyGraphQL.Entities.Plan", "Plan")
                        .WithMany("PlanQuestions")
                        .HasForeignKey("PlanId");

                    b.HasOne("LeetifyGraphQL.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("Plan");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PlanUser", b =>
                {
                    b.HasOne("LeetifyGraphQL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SavedByUsersSub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeetifyGraphQL.Entities.Plan", null)
                        .WithMany()
                        .HasForeignKey("SavedPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeetifyGraphQL.Entities.Plan", b =>
                {
                    b.Navigation("PlanQuestions");
                });

            modelBuilder.Entity("LeetifyGraphQL.Entities.User", b =>
                {
                    b.Navigation("CreatedPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
